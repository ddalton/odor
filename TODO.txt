http://www.odata.org/getting-started/basic-tutorial/


Nested Filter in Expand

GET serviceRoot/People?$expand=Trips($filter=Name eq 'Trip in US')


See odata-v4.0-part2-url-conventions.pdf


TODO
====
Expand
   - List of expandItems
Each expanditem needs to be evaluated separately


select attributes at many levels

odata/Products(08f80b45-68a9-4a9f-a516-556e69e6bd58)?$expand=productItemChoices($select=anycolumnnameinproductItemChoices;$expand=item($select=name))


Example 90: expand a navigation property of an entity type
http://host/service/Products?$expand=Category

Example 93: all categories and for each category the references of all related products
http://host/service/Categories?$expand=Products/$ref


Name
Description
Category.Name

http://host/service/Products?
$select=Name,Description&$expand=Category($select=Name)



Rating
ReleaseDate
http://host/service/Products?$select=Rating,ReleaseDate


Furthermore, if you want only the identifiers of the brand family models, you would do that:

~/Brands?$expand=Families($expand=Models($select=Id))



Recursive expand
GET ~/Managers?$expand=Employees($levels=4) 




// Algorithm needed to support levels retrieval
// 2 Types of levels

*/($levels=depth)
- retrieves all related entities to a certain depth. The BFS algorithm can be used

a.b/($levels=depth)
retrieves b of the recursive a relationship upto a certain depth. i.e., a.b, a.a.b, a.a.a.b



For example, a man has friends. They, in turn, also have other friends, and we want to retrieve the entire friends tree. To make it easier to write such recursive queries, OData introduces an additional option $level that specifies the recursion depth:
http://yourhost/service/yourdatabase/person(1)?$expand=friends($level=2)
This query constructs a tree (based on friends link) to a depth = 2.



void breadthFirst(Node parent, int maxDepth) {

  if(maxDepth < 0) {
    return;
  }

  Queue<Node> nodeQueue = new ArrayDeque<Node>();
  nodeQueue.add(parent);

  int currentDepth = 0, 
      elementsToDepthIncrease = 1, 
      nextElementsToDepthIncrease = 0;

  while (!nodeQueue.isEmpty()) {
    Node current = nodeQueue.poll();
    process(current);
    nextElementsToDepthIncrease += current.numberOfChildren();
    if (--elementsToDepthIncrease == 0) {
      if (++currentDepth > maxDepth) return;
      elementsToDepthIncrease = nextElementsToDepthIncrease;
      nextElementsToDepthIncrease = 0;
    }
    for (Node child : current.children()) {
      nodeQueue.add(child);
    }
  }

}

void process(Node node) {
  // Do your own processing here. All nodes handed to
  // this method will be within the specified depth limit.








Add a link 
In this example, the client sends a PUT request to /Products(6)/Supplier/$ref, which is the $ref URI for the Supplier of the product with ID = 6. If the request succeeds, the server sends a 204 (No Content) response:

{"@odata.id":"http://myproductservice.example.com/Suppliers(4)"}

}


https://msdn.microsoft.com/en-us/library/ff478141.aspx 